;
; File generated by cc65 v 2.19 - Git e95db437a
;
	.fopt		compiler,"cc65 v 2.19 - Git e95db437a"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_FamiToneInit
	.import		_FamiToneSfxInit
	.import		_FamiToneMusicPlay
	.import		_FamiToneSfxPlay
	.import		_FamiToneUpdate
	.importzp	_InputPort1
	.importzp	_InputPort1Prev
	.import		_WaitFrame
	.import		_WaitVBlank
	.import		_UnRLE
	.export		_BG_TITLE
	.export		_PAL_TITLE
	.export		_BG_DAN
	.export		_PAL_DAN
	.export		_BG_TRESSLEY
	.export		_PAL_TRESSLEY
	.export		_BG_JEFF
	.export		_PAL_JEFF
	.export		_BG_RON
	.export		_PAL_RON
	.export		_i
	.export		_j
	.export		_state
	.export		_bg
	.export		_pattern_table
	.export		_ppu_addr
	.export		_ppu_data
	.export		_ppu_data_size
	.export		_text_sprites
	.export		_ResetScroll
	.export		_EnablePPU
	.export		_DisablePPU
	.export		_WritePPU
	.export		_DrawBackground
	.export		_InitTitle
	.export		_InitDan
	.export		_InitTressley
	.export		_InitJeff
	.export		_InitRon
	.export		_HandleInput
	.export		_Update
	.export		_main

.segment	"RODATA"

_BG_TITLE:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$BF
	.byte	$49
	.byte	$01
	.byte	$1F
	.byte	$00
	.byte	$01
	.byte	$21
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$40
	.byte	$47
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$47
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$44
	.byte	$46
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$42
	.byte	$48
	.byte	$46
	.byte	$46
	.byte	$48
	.byte	$43
	.byte	$00
	.byte	$44
	.byte	$46
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$40
	.byte	$46
	.byte	$48
	.byte	$01
	.byte	$02
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$44
	.byte	$46
	.byte	$48
	.byte	$41
	.byte	$00
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$44
	.byte	$46
	.byte	$48
	.byte	$41
	.byte	$00
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$42
	.byte	$45
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$44
	.byte	$47
	.byte	$46
	.byte	$45
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$44
	.byte	$47
	.byte	$46
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$49
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$42
	.byte	$46
	.byte	$46
	.byte	$45
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$42
	.byte	$46
	.byte	$46
	.byte	$45
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$49
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$46
	.byte	$45
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$46
	.byte	$45
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$44
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$42
	.byte	$47
	.byte	$01
	.byte	$02
	.byte	$46
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$48
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$21
	.byte	$49
	.byte	$01
	.byte	$1F
	.byte	$00
	.byte	$01
	.byte	$87
	.byte	$0D
	.byte	$00
	.byte	$50
	.byte	$60
	.byte	$70
	.byte	$80
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$90
	.byte	$A0
	.byte	$60
	.byte	$90
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$01
	.byte	$6F
	.byte	$2A
	.byte	$35
	.byte	$2C
	.byte	$12
	.byte	$10
	.byte	$12
	.byte	$12
	.byte	$08
	.byte	$23
	.byte	$09
	.byte	$33
	.byte	$34
	.byte	$2F
	.byte	$2E
	.byte	$25
	.byte	$32
	.byte	$00
	.byte	$01
	.byte	$91
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$00
_PAL_TITLE:
	.byte	$0F
	.byte	$2D
	.byte	$27
	.byte	$30
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29
_BG_DAN:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$0D
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$00
	.byte	$02
	.byte	$56
	.byte	$24
	.byte	$21
	.byte	$2E
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$27
	.byte	$35
	.byte	$29
	.byte	$34
	.byte	$21
	.byte	$32
	.byte	$00
	.byte	$02
	.byte	$53
	.byte	$60
	.byte	$70
	.byte	$90
	.byte	$60
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$A0
	.byte	$B7
	.byte	$70
	.byte	$60
	.byte	$00
	.byte	$02
	.byte	$35
	.byte	$C0
	.byte	$01
	.byte	$B7
	.byte	$50
	.byte	$01
	.byte	$80
	.byte	$70
	.byte	$60
	.byte	$00
	.byte	$02
	.byte	$31
	.byte	$B7
	.byte	$87
	.byte	$05
	.byte	$87
	.byte	$C7
	.byte	$07
	.byte	$00
	.byte	$A0
	.byte	$C7
	.byte	$57
	.byte	$00
	.byte	$B7
	.byte	$A0
	.byte	$80
	.byte	$90
	.byte	$70
	.byte	$60
	.byte	$87
	.byte	$C7
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$A9
	.byte	$50
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$18
	.byte	$00
	.byte	$02
	.byte	$00
_PAL_DAN:
	.byte	$0F
	.byte	$2D
	.byte	$27
	.byte	$30
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29
_BG_TRESSLEY:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$0E
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$98
	.byte	$99
	.byte	$00
	.byte	$02
	.byte	$1A
	.byte	$AA
	.byte	$00
	.byte	$00
	.byte	$AB
	.byte	$AC
	.byte	$00
	.byte	$02
	.byte	$1A
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$A8
	.byte	$A9
	.byte	$00
	.byte	$02
	.byte	$1A
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$CF
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$DC
	.byte	$C8
	.byte	$C9
	.byte	$DD
	.byte	$DE
	.byte	$DF
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$ED
	.byte	$EF
	.byte	$D8
	.byte	$DA
	.byte	$D9
	.byte	$DB
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$E8
	.byte	$EA
	.byte	$EB
	.byte	$E9
	.byte	$EC
	.byte	$EE
	.byte	$00
	.byte	$02
	.byte	$54
	.byte	$34
	.byte	$32
	.byte	$25
	.byte	$33
	.byte	$33
	.byte	$2C
	.byte	$25
	.byte	$39
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$24
	.byte	$32
	.byte	$35
	.byte	$2D
	.byte	$33
	.byte	$00
	.byte	$02
	.byte	$53
	.byte	$57
	.byte	$70
	.byte	$80
	.byte	$87
	.byte	$07
	.byte	$C7
	.byte	$70
	.byte	$60
	.byte	$00
	.byte	$02
	.byte	$36
	.byte	$06
	.byte	$01
	.byte	$06
	.byte	$01
	.byte	$00
	.byte	$C0
	.byte	$77
	.byte	$A0
	.byte	$B7
	.byte	$50
	.byte	$00
	.byte	$02
	.byte	$30
	.byte	$B0
	.byte	$A0
	.byte	$90
	.byte	$90
	.byte	$A7
	.byte	$70
	.byte	$80
	.byte	$90
	.byte	$A0
	.byte	$60
	.byte	$00
	.byte	$07
	.byte	$A0
	.byte	$A7
	.byte	$A0
	.byte	$C0
	.byte	$90
	.byte	$87
	.byte	$C0
	.byte	$A0
	.byte	$00
	.byte	$02
	.byte	$A9
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$02
	.byte	$18
	.byte	$00
	.byte	$02
	.byte	$00
_PAL_TRESSLEY:
	.byte	$0F
	.byte	$2D
	.byte	$27
	.byte	$30
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29
_BG_JEFF:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$0D
	.byte	$FA
	.byte	$FB
	.byte	$FC
	.byte	$FD
	.byte	$FE
	.byte	$FF
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$F4
	.byte	$F5
	.byte	$F6
	.byte	$F7
	.byte	$F8
	.byte	$F9
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$E6
	.byte	$E7
	.byte	$F0
	.byte	$F1
	.byte	$F2
	.byte	$F3
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E4
	.byte	$E5
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$1F
	.byte	$1D
	.byte	$16
	.byte	$16
	.byte	$D0
	.byte	$D1
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$0B
	.byte	$0F
	.byte	$1B
	.byte	$1A
	.byte	$18
	.byte	$17
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$16
	.byte	$02
	.byte	$04
	.byte	$19
	.byte	$00
	.byte	$02
	.byte	$56
	.byte	$2A
	.byte	$25
	.byte	$26
	.byte	$26
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$36
	.byte	$2F
	.byte	$23
	.byte	$21
	.byte	$2C
	.byte	$33
	.byte	$00
	.byte	$02
	.byte	$55
	.byte	$B0
	.byte	$60
	.byte	$70
	.byte	$04
	.byte	$70
	.byte	$60
	.byte	$00
	.byte	$02
	.byte	$35
	.byte	$80
	.byte	$C0
	.byte	$60
	.byte	$70
	.byte	$A0
	.byte	$B7
	.byte	$87
	.byte	$C7
	.byte	$00
	.byte	$57
	.byte	$70
	.byte	$B7
	.byte	$01
	.byte	$C7
	.byte	$00
	.byte	$02
	.byte	$34
	.byte	$A7
	.byte	$06
	.byte	$60
	.byte	$87
	.byte	$C0
	.byte	$87
	.byte	$80
	.byte	$90
	.byte	$00
	.byte	$02
	.byte	$AF
	.byte	$50
	.byte	$50
	.byte	$00
	.byte	$02
	.byte	$18
	.byte	$00
	.byte	$02
	.byte	$00
_PAL_JEFF:
	.byte	$0F
	.byte	$2D
	.byte	$27
	.byte	$30
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29
_BG_RON:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$0D
	.byte	$4F
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$5E
	.byte	$5F
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$58
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$6F
	.byte	$DF
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$7E
	.byte	$7F
	.byte	$DE
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$78
	.byte	$79
	.byte	$7A
	.byte	$7B
	.byte	$7C
	.byte	$7D
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$8B
	.byte	$8C
	.byte	$8D
	.byte	$8E
	.byte	$8F
	.byte	$DB
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$9E
	.byte	$9F
	.byte	$EB
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$CD
	.byte	$CE
	.byte	$CF
	.byte	$ED
	.byte	$EE
	.byte	$EF
	.byte	$00
	.byte	$02
	.byte	$37
	.byte	$32
	.byte	$2F
	.byte	$2E
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$22
	.byte	$21
	.byte	$33
	.byte	$33
	.byte	$00
	.byte	$02
	.byte	$57
	.byte	$77
	.byte	$A0
	.byte	$C0
	.byte	$97
	.byte	$70
	.byte	$60
	.byte	$00
	.byte	$02
	.byte	$37
	.byte	$50
	.byte	$60
	.byte	$01
	.byte	$07
	.byte	$60
	.byte	$A0
	.byte	$B7
	.byte	$B7
	.byte	$70
	.byte	$60
	.byte	$00
	.byte	$02
	.byte	$36
	.byte	$C7
	.byte	$87
	.byte	$07
	.byte	$77
	.byte	$90
	.byte	$01
	.byte	$04
	.byte	$A7
	.byte	$00
	.byte	$02
	.byte	$AF
	.byte	$50
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$18
	.byte	$00
	.byte	$02
	.byte	$00
_PAL_RON:
	.byte	$0F
	.byte	$2D
	.byte	$27
	.byte	$30
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	1,$00
_j:
	.res	1,$00
_state:
	.res	1,$00
_bg:
	.res	2,$00
_pattern_table:
	.res	1,$00
_ppu_addr:
	.res	2,$00
_ppu_data:
	.res	2,$00
_ppu_data_size:
	.res	1,$00
.segment	"OAM"
_text_sprites:
	.res	4,$00

; ---------------------------------------------------------------
; void __near__ ResetScroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ResetScroll: near

.segment	"CODE"

;
; PPU_SCROLL = 0x00;
;
	lda     #$00
	sta     $2005
;
; PPU_SCROLL = 0x00;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ EnablePPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_EnablePPU: near

.segment	"CODE"

;
; PPUCTRL_NMI_ON      ; // enable NMIs
;
	lda     #$80
	sta     _i
;
; if(pattern_table == 0) {
;
	lda     _pattern_table
	bne     L0005
;
; i |= (PPUCTRL_BPATTERN_0 | PPUCTRL_SPATTERN_0);
;
	lda     _i
;
; } else {
;
	jmp     L0004
;
; i |= (PPUCTRL_BPATTERN_1 | PPUCTRL_SPATTERN_1);
;
L0005:	lda     _i
	ora     #$18
L0004:	sta     _i
;
; PPU_CTRL = i;
;
	sta     $2000
;
; PPUMASK_L8_SSHOW ; // show sprites in leftmost 8px
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ DisablePPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DisablePPU: near

.segment	"CODE"

;
; PPU_CTRL = 0x00;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0x00;
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ WritePPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_WritePPU: near

.segment	"CODE"

;
; PPU_ADDRESS = (uint8_t)(ppu_addr >> 8);
;
	lda     _ppu_addr+1
	sta     $2006
;
; PPU_ADDRESS = (uint8_t)(ppu_addr);
;
	lda     _ppu_addr
	sta     $2006
;
; for ( i = 0; i < ppu_data_size; ++i ) {
;
	lda     #$00
	sta     _i
L0007:	lda     _i
	cmp     _ppu_data_size
	bcs     L0003
;
; PPU_DATA = ppu_data[i];
;
	lda     _ppu_data
	ldx     _ppu_data+1
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     $2007
;
; for ( i = 0; i < ppu_data_size; ++i ) {
;
	inc     _i
	jmp     L0007
;
; }
;
L0003:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ DrawBackground (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawBackground: near

.segment	"CODE"

;
; PPU_ADDRESS = (uint8_t)(PPU_NAMETABLE_0 >> 8);
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = (uint8_t)(PPU_NAMETABLE_0);
;
	lda     #$00
	sta     $2006
;
; UnRLE(bg);
;
	lda     _bg
	ldx     _bg+1
	jmp     _UnRLE

.endproc

; ---------------------------------------------------------------
; void __near__ InitTitle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitTitle: near

.segment	"CODE"

;
; DisablePPU();
;
	jsr     _DisablePPU
;
; state = STATE_TITLE;
;
	lda     #$00
	sta     _state
;
; pattern_table = 0;
;
	sta     _pattern_table
;
; ppu_addr = PPU_PALETTE;
;
	ldx     #$3F
	sta     _ppu_addr
	stx     _ppu_addr+1
;
; ppu_data = PAL_TITLE;
;
	lda     #>(_PAL_TITLE)
	sta     _ppu_data+1
	lda     #<(_PAL_TITLE)
	sta     _ppu_data
;
; ppu_data_size = sizeof(PAL_TITLE);
;
	lda     #$10
	sta     _ppu_data_size
;
; WritePPU();
;
	jsr     _WritePPU
;
; bg = BG_TITLE;
;
	lda     #>(_BG_TITLE)
	sta     _bg+1
	lda     #<(_BG_TITLE)
	sta     _bg
;
; DrawBackground();
;
	jsr     _DrawBackground
;
; FamiToneMusicPlay(SONG_TITLE);
;
	lda     #$00
	jsr     _FamiToneMusicPlay
;
; WaitVBlank();
;
	jsr     _WaitVBlank
;
; EnablePPU();
;
	jmp     _EnablePPU

.endproc

; ---------------------------------------------------------------
; void __near__ InitDan (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitDan: near

.segment	"CODE"

;
; DisablePPU();
;
	jsr     _DisablePPU
;
; state = STATE_DAN;
;
	lda     #$01
	sta     _state
;
; pattern_table = 1;
;
	sta     _pattern_table
;
; ppu_addr = PPU_PALETTE;
;
	ldx     #$3F
	lda     #$00
	sta     _ppu_addr
	stx     _ppu_addr+1
;
; ppu_data = PAL_DAN;
;
	lda     #>(_PAL_DAN)
	sta     _ppu_data+1
	lda     #<(_PAL_DAN)
	sta     _ppu_data
;
; ppu_data_size = sizeof(PAL_DAN);
;
	lda     #$10
	sta     _ppu_data_size
;
; WritePPU();
;
	jsr     _WritePPU
;
; bg = BG_DAN;
;
	lda     #>(_BG_DAN)
	sta     _bg+1
	lda     #<(_BG_DAN)
	sta     _bg
;
; DrawBackground();
;
	jsr     _DrawBackground
;
; FamiToneMusicPlay(SONG_DAN);
;
	lda     #$01
	jsr     _FamiToneMusicPlay
;
; WaitVBlank();
;
	jsr     _WaitVBlank
;
; EnablePPU();
;
	jmp     _EnablePPU

.endproc

; ---------------------------------------------------------------
; void __near__ InitTressley (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitTressley: near

.segment	"CODE"

;
; DisablePPU();
;
	jsr     _DisablePPU
;
; state = STATE_TRESSLEY;
;
	lda     #$02
	sta     _state
;
; pattern_table = 1;
;
	lda     #$01
	sta     _pattern_table
;
; ppu_addr = PPU_PALETTE;
;
	ldx     #$3F
	lda     #$00
	sta     _ppu_addr
	stx     _ppu_addr+1
;
; ppu_data = PAL_TRESSLEY;
;
	lda     #>(_PAL_TRESSLEY)
	sta     _ppu_data+1
	lda     #<(_PAL_TRESSLEY)
	sta     _ppu_data
;
; ppu_data_size = sizeof(PAL_TRESSLEY);
;
	lda     #$10
	sta     _ppu_data_size
;
; WritePPU();
;
	jsr     _WritePPU
;
; bg = BG_TRESSLEY;
;
	lda     #>(_BG_TRESSLEY)
	sta     _bg+1
	lda     #<(_BG_TRESSLEY)
	sta     _bg
;
; DrawBackground();
;
	jsr     _DrawBackground
;
; FamiToneMusicPlay(SONG_TRESSLEY);
;
	lda     #$00
	jsr     _FamiToneMusicPlay
;
; WaitVBlank();
;
	jsr     _WaitVBlank
;
; EnablePPU();
;
	jmp     _EnablePPU

.endproc

; ---------------------------------------------------------------
; void __near__ InitJeff (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitJeff: near

.segment	"CODE"

;
; DisablePPU();
;
	jsr     _DisablePPU
;
; state = STATE_JEFF;
;
	lda     #$03
	sta     _state
;
; pattern_table = 1;
;
	lda     #$01
	sta     _pattern_table
;
; ppu_addr = PPU_PALETTE;
;
	ldx     #$3F
	lda     #$00
	sta     _ppu_addr
	stx     _ppu_addr+1
;
; ppu_data = PAL_JEFF;
;
	lda     #>(_PAL_JEFF)
	sta     _ppu_data+1
	lda     #<(_PAL_JEFF)
	sta     _ppu_data
;
; ppu_data_size = sizeof(PAL_JEFF);
;
	lda     #$10
	sta     _ppu_data_size
;
; WritePPU();
;
	jsr     _WritePPU
;
; bg = BG_JEFF;
;
	lda     #>(_BG_JEFF)
	sta     _bg+1
	lda     #<(_BG_JEFF)
	sta     _bg
;
; DrawBackground();
;
	jsr     _DrawBackground
;
; FamiToneMusicPlay(SONG_JEFF);
;
	lda     #$03
	jsr     _FamiToneMusicPlay
;
; WaitVBlank();
;
	jsr     _WaitVBlank
;
; EnablePPU();
;
	jmp     _EnablePPU

.endproc

; ---------------------------------------------------------------
; void __near__ InitRon (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitRon: near

.segment	"CODE"

;
; DisablePPU();
;
	jsr     _DisablePPU
;
; state = STATE_RON;
;
	lda     #$04
	sta     _state
;
; pattern_table = 1;
;
	lda     #$01
	sta     _pattern_table
;
; ppu_addr = PPU_PALETTE;
;
	ldx     #$3F
	lda     #$00
	sta     _ppu_addr
	stx     _ppu_addr+1
;
; ppu_data = PAL_RON;
;
	lda     #>(_PAL_RON)
	sta     _ppu_data+1
	lda     #<(_PAL_RON)
	sta     _ppu_data
;
; ppu_data_size = sizeof(PAL_RON);
;
	lda     #$10
	sta     _ppu_data_size
;
; WritePPU();
;
	jsr     _WritePPU
;
; bg = BG_RON;
;
	lda     #>(_BG_RON)
	sta     _bg+1
	lda     #<(_BG_RON)
	sta     _bg
;
; DrawBackground();
;
	jsr     _DrawBackground
;
; FamiToneMusicPlay(SONG_RON);
;
	lda     #$04
	jsr     _FamiToneMusicPlay
;
; WaitVBlank();
;
	jsr     _WaitVBlank
;
; EnablePPU();
;
	jmp     _EnablePPU

.endproc

; ---------------------------------------------------------------
; void __near__ HandleInput (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_HandleInput: near

.segment	"CODE"

;
; switch(state) {
;
	lda     _state
;
; }
;
	beq     L0032
	cmp     #$01
	beq     L003A
	cmp     #$02
	beq     L0042
	cmp     #$03
	jeq     L004A
	cmp     #$04
	jeq     L0052
	rts
;
; if ((InputPort1 & BUTTON_START) && !(InputPort1Prev & BUTTON_START)) {
;
L0032:	lda     _InputPort1
	and     #$10
	beq     L0036
	lda     _InputPort1Prev
	and     #$10
	bne     L0036
;
; InitDan();
;
	jsr     _InitDan
;
; FamiToneSfxPlay(SFX_START);
;
	lda     #$03
	jsr     _FamiToneSfxPlay
;
; if ((InputPort1 & BUTTON_A) && !(InputPort1Prev & BUTTON_A)) {
;
L0036:	lda     _InputPort1
	and     #$80
	beq     L0009
	lda     _InputPort1Prev
	and     #$80
	bne     L0009
;
; InitDan();
;
	jsr     _InitDan
;
; FamiToneSfxPlay(SFX_START);
;
	lda     #$03
	jmp     _FamiToneSfxPlay
;
; break;
;
L0009:	rts
;
; if ((InputPort1 & BUTTON_START) && !(InputPort1Prev & BUTTON_START)) {
;
L003A:	lda     _InputPort1
	and     #$10
	beq     L003E
	lda     _InputPort1Prev
	and     #$10
	bne     L003E
;
; InitTressley();
;
	jsr     _InitTressley
;
; FamiToneSfxPlay(SFX_START);
;
	lda     #$03
	jsr     _FamiToneSfxPlay
;
; if ((InputPort1 & BUTTON_A) && !(InputPort1Prev & BUTTON_A)) {
;
L003E:	lda     _InputPort1
	and     #$80
	beq     L0012
	lda     _InputPort1Prev
	and     #$80
	bne     L0012
;
; InitTressley();
;
	jsr     _InitTressley
;
; FamiToneSfxPlay(SFX_START);
;
	lda     #$03
	jmp     _FamiToneSfxPlay
;
; break;
;
L0012:	rts
;
; if ((InputPort1 & BUTTON_START) && !(InputPort1Prev & BUTTON_START)) {
;
L0042:	lda     _InputPort1
	and     #$10
	beq     L0046
	lda     _InputPort1Prev
	and     #$10
	bne     L0046
;
; InitJeff();
;
	jsr     _InitJeff
;
; FamiToneSfxPlay(SFX_START);
;
	lda     #$03
	jsr     _FamiToneSfxPlay
;
; if ((InputPort1 & BUTTON_A) && !(InputPort1Prev & BUTTON_A)) {
;
L0046:	lda     _InputPort1
	and     #$80
	beq     L001B
	lda     _InputPort1Prev
	and     #$80
	bne     L001B
;
; InitJeff();
;
	jsr     _InitJeff
;
; FamiToneSfxPlay(SFX_START);
;
	lda     #$03
	jmp     _FamiToneSfxPlay
;
; break;
;
L001B:	rts
;
; if ((InputPort1 & BUTTON_START) && !(InputPort1Prev & BUTTON_START)) {
;
L004A:	lda     _InputPort1
	and     #$10
	beq     L004E
	lda     _InputPort1Prev
	and     #$10
	bne     L004E
;
; InitRon();
;
	jsr     _InitRon
;
; FamiToneSfxPlay(SFX_START);
;
	lda     #$03
	jsr     _FamiToneSfxPlay
;
; if ((InputPort1 & BUTTON_A) && !(InputPort1Prev & BUTTON_A)) {
;
L004E:	lda     _InputPort1
	and     #$80
	beq     L0024
	lda     _InputPort1Prev
	and     #$80
	bne     L0024
;
; InitRon();
;
	jsr     _InitRon
;
; FamiToneSfxPlay(SFX_START);
;
	lda     #$03
	jmp     _FamiToneSfxPlay
;
; break;
;
L0024:	rts
;
; if ((InputPort1 & BUTTON_START) && !(InputPort1Prev & BUTTON_START)) {
;
L0052:	lda     _InputPort1
	and     #$10
	beq     L0056
	lda     _InputPort1Prev
	and     #$10
	bne     L0056
;
; InitTitle();
;
	jsr     _InitTitle
;
; FamiToneSfxPlay(SFX_START);
;
	lda     #$03
	jsr     _FamiToneSfxPlay
;
; if ((InputPort1 & BUTTON_A) && !(InputPort1Prev & BUTTON_A)) {
;
L0056:	lda     _InputPort1
	and     #$80
	beq     L002D
	lda     _InputPort1Prev
	and     #$80
	bne     L002D
;
; InitTitle();
;
	jsr     _InitTitle
;
; FamiToneSfxPlay(SFX_START);
;
	lda     #$03
	jmp     _FamiToneSfxPlay
;
; break;
;
L002D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Update: near

.segment	"CODE"

;
; switch(state) {
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; FamiToneInit();
;
	jsr     _FamiToneInit
;
; FamiToneSfxInit();
;
	jsr     _FamiToneSfxInit
;
; InitTitle();
;
	jsr     _InitTitle
;
; ResetScroll();
;
	jsr     _ResetScroll
;
; EnablePPU();
;
	jsr     _EnablePPU
;
; WaitFrame();
;
L0002:	jsr     _WaitFrame
;
; FamiToneUpdate();
;
	jsr     _FamiToneUpdate
;
; HandleInput();
;
	jsr     _HandleInput
;
; Update();
;
	jsr     _Update
;
; ResetScroll();
;
	jsr     _ResetScroll
;
; while (1) {
;
	jmp     L0002

.endproc

